Design the software to support an automated UML production system to aid both designers and clients in creating and managing UML analysis and design documentation.  This system is meant to facilitate the analysis and design phase of software development and should be used collaboratively between software developers and clients.
	The system will first be provided a concept statement by the user that it will analyze to perform domain analysis and aid in development of a domain class model.  During this analysis, the system will use a natural language parser to attempt to identify key terms that could be considered classes, and use these to build an application class model.  The system will present the application class model to the user, and the user will be prompted to remove any classes that are not relevant or add any missing classes.  The user is now prompted to write a small amount about each class to prepare a data dictionary.
	Next, the system will use a natural language parser to identify stative verbs or verb phrases that can correspond to associations between the classes.  From these possible associations, the user will be prompted to remove associations that are unnecessary or incorrect (the system will attempt to identify associations it thinks are less useful), and the user will be prompted to add associations that are missing (and identify the classes related by that association).  Association attributes, such as name, end-names, and multiplicity, are also automatically generated by the system, and the user is allowed to add, modify, or delete these.
	From this point, the system will attempt to refine the classes by inheritance by either bottom-up generalization or top-down specialization.  Possible refinements in the class diagram will be shown to the user for consideration.  The user can then make what changes they find necessary.
	The system will now use the domain analysis information and domain class model to identify actors that interact with the system.  System identified actors will be shown to the user to verify, add, change, or delete.  By identifying these actors, the system boundary will be identified - any actors chosen here will be considered outside the system and everything else is considered part of the system.
	The system will attempt to identify use cases from the information it has and will allow the user to add, change, or remove use cases.  The system will prompt the user to prepare scenarios for the use cases identified. To facilitate scenario creation, the system will provide information including initial and final events, exception scenarios, and external events.  
	From these use cases and scenarios, the system will help the user generate sequence diagrams.  For similar scenarios, the system will gather information from previously created sequence diagrams to aid in auto-generating sequence diagrams.  Sequence diagrams can also be expanded to include boundary, entity, and controller objects.
	The final product from this system is a domain class model, use cases, and system sequence diagrams.  

